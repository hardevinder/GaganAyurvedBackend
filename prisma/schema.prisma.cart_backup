// prisma/schema.prisma
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* =========================
   üë§ USER & ADDRESS
========================= */
model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String?   // nullable for Google users
  provider  String    @default("credentials")
  avatar    String?
  phone     String?
  isAdmin   Boolean   @default(false)

  addresses Address[]
  orders    Order[]
  carts     Cart[]    // relation to carts (user can have multiple carts - e.g. history or multiple sessions)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([provider])
}

/* Optional shipping/billing address table ‚Äî keep if you need it now */
model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  name       String
  phone      String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String    @default("IN")
  isDefault  Boolean   @default(false)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
}

/* =========================
   üè∑Ô∏è CATEGORY
========================= */
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?   // üëà added

  products    Product[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

/* =========================
   üõçÔ∏è PRODUCT CATALOG
========================= */
model Product {
  id          Int            @id @default(autoincrement())
  name        String
  slug        String         @unique
  description String
  summary     String?
  brand       String?
  imageUrl    String?
  isActive    Boolean        @default(true)
  metaTitle   String?
  metaDesc    String?

  categoryId  Int?
  category    Category?      @relation(fields: [categoryId], references: [id])

  variants    Variant[]
  images      ProductImage[]

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([categoryId])
  @@index([isActive])
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  url        String
  alt        String?
  position   Int      @default(0)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
}

/* =========================
   üé® VARIANT
========================= */
model Variant {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])

  name        String
  sku         String?  @unique
  price       Decimal  @db.Decimal(10,2)
  mrp         Decimal? @db.Decimal(10,2)
  salePrice   Decimal? @db.Decimal(10,2)
  stock       Int?
  weightGrams Int?

  orderItems  OrderItem[]
  cartItems   CartItem[]  // relation from cart items

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

/* =========================
   üõí CART & CART ITEMS
   (New models for guest/user carts)
========================= */
model Cart {
  id         Int        @id @default(autoincrement())
  userId     Int?       // nullable for guest carts
  user       User?      @relation(fields: [userId], references: [id])
  sessionId  String?    @unique // store a session/cookie id for guest cart mapping
  items      CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  expiresAt  DateTime?  // optional TTL to expire guest carts

  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  cart       Cart     @relation(fields: [cartId], references: [id])
  variantId  Int
  variant    Variant  @relation(fields: [variantId], references: [id])
  quantity   Int
  price      Decimal  @db.Decimal(10,2) // snapshot unit price at time of add-to-cart
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([cartId])
  @@index([variantId])
}

/* =========================
   üì¶ ORDER & ITEMS
========================= */
model Order {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  items     OrderItem[]

  // financials
  total     Decimal      @db.Decimal(12,2)

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([userId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  variantId Int
  variant   Variant  @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10,2) // unit price snapshot

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([variantId])
}

/* =========================
   üìù BLOG
========================= */
model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
